Index: include/clang/Driver/Options.td
===================================================================
--- include/clang/Driver/Options.td	(revision 218454)
+++ include/clang/Driver/Options.td	(working copy)
@@ -163,6 +163,33 @@
   HelpText<"Emit ARC errors even if the migrator can fix them">,
   Flags<[CC1Option]>;
 
+// BEGIN TEMPLIGHT
+//===----------------------------------------------------------------------===//
+// Templight Options
+//===----------------------------------------------------------------------===//
+  
+def templight : Flag<["-"], "templight">, Group<f_Group>, Flags<[CC1Option]>,
+  HelpText<"For tracing template instantiations">; 
+  
+def templight_stdout : Flag<["-"], "templight-stdout">, Group<f_Group>, Flags<[CC1Option]>,
+  HelpText<"Tracing template instantiations to standard output">;
+  
+def templight_memory : Flag<["-"], "templight-memory">, Group<f_Group>, Flags<[CC1Option]>,
+  HelpText<"For tracing memory usage during template instantiations">;
+  
+def templight_safe_mode : Flag<["-"], "templight-safe-mode">, Group<f_Group>, Flags<[CC1Option]>,
+  HelpText<"For flushing Templight trace immediately instead of store the trace in a buffer">;
+  
+def templight_output : JoinedOrSeparate<["-"], "templight-output">, Flags<[DriverOption, RenderAsInput, CC1Option]>,
+  HelpText<"Write Templight output to <file>">, MetaVarName<"<file>">;
+  
+def templight_format : JoinedOrSeparate<["-"], "templight-format">, Flags<[DriverOption, RenderAsInput, CC1Option]>,
+  HelpText<"Format of Templight output (yaml/xml/text, default is yaml)">, MetaVarName<"<format>">;
+  
+def trace_capacity : JoinedOrSeparate<["-"], "trace-capacity">, Flags<[DriverOption, RenderAsInput, CC1Option]>,
+  HelpText<"Capacity of internal template trace buffer">, MetaVarName<"<capacity>">;
+// END TEMPLIGHT
+
 def _migrate : Flag<["--"], "migrate">, Flags<[DriverOption]>,
   HelpText<"Run the migrator">;
 def ccc_objcmt_migrate : Separate<["-"], "ccc-objcmt-migrate">,
Index: include/clang/Frontend/FrontendOptions.h
===================================================================
--- include/clang/Frontend/FrontendOptions.h	(revision 218454)
+++ include/clang/Frontend/FrontendOptions.h	(working copy)
@@ -147,6 +147,19 @@
   unsigned ASTDumpLookups : 1;             ///< Whether we include lookup table
                                            ///< dumps in AST dumps.
 
+  // BEGIN TEMPLIGHT
+  unsigned Templight : 1;                  ///< For Tracing template
+                                           /// instantiations
+  unsigned TemplightStdout : 1;            ///< Tracing template instantiations
+                                           /// to stdout
+  unsigned TemplightMemory : 1;            ///< For tracing memory usage
+                                           /// during template instantiations
+                                           /// This indicates Templight
+  unsigned TemplightSafeMode : 1;          ///< For flushing the Templight
+                                           /// trace immediately instead of
+                                           /// store it in a buffer
+  // END TEMPLIGHT
+
   CodeCompleteOptions CodeCompleteOpts;
 
   enum {
@@ -203,6 +216,17 @@
   /// The output file, if any.
   std::string OutputFile;
 
+  // BEGIN TEMPLIGHT
+  /// Output file fo Templight, if any.
+  std::string TemplightOutputFile;
+
+  /// Format of Templight output (yaml/xml/text)
+  std::string TemplightFormat;
+
+  /// Capacity of trace file
+  unsigned TraceCapacity;
+  // END TEMPLIGHT
+
   /// If given, the new suffix for fix-it rewritten files.
   std::string FixItSuffix;
 
Index: include/clang/Sema/Sema.h
===================================================================
--- include/clang/Sema/Sema.h	(revision 218454)
+++ include/clang/Sema/Sema.h	(working copy)
@@ -59,6 +59,11 @@
   template <typename ValueT, typename ValueInfoT> class DenseSet;
   class SmallBitVector;
   class InlineAsmIdentifierInfo;
+   // BEGIN TEMPLIGHT
+  namespace yaml {
+    class Output;
+  }
+  // END TEMPLIGHT
 }
 
 namespace clang {
@@ -6184,6 +6189,12 @@
       /// We are instantiating the exception specification for a function
       /// template which was deferred until it was needed.
       ExceptionSpecInstantiation
+      // BEGIN TEMPLIGHT
+      /// Added for Template debugging (TEMPLIGHT)
+      /// We are _not_ instantiating a template because it is already
+      /// instantiated.
+      ,Memoization
+      // END TEMPLIGHT
     } Kind;
 
     /// \brief The point of instantiation within the source code.
@@ -6243,7 +6254,10 @@
       case DeducedTemplateArgumentSubstitution:
       case DefaultFunctionArgumentInstantiation:
         return X.TemplateArgs == Y.TemplateArgs;
-
+      // BEGIN TEMPLIGHT
+      case Memoization:
+        break;
+      // END TEMPLIGHT
       }
 
       llvm_unreachable("Invalid InstantiationKind!");
@@ -8567,6 +8581,156 @@
       DC = CatD->getClassInterface();
     return DC;
   }
+
+  // BEGIN TEMPLIGHT
+public:
+  /// \brief Since we profile template instantiations it is more
+  /// efficient to store this struct in an internal buffer during template
+  /// instantiating than
+  struct RawTraceEntry {
+    bool IsTemplateBegin = false;
+    ActiveTemplateInstantiation::InstantiationKind InstantiationKind;
+    uintptr_t Entity;
+    SourceLocation PointOfInstantiation;
+    double TimeStamp;
+    int MemoryUsage;
+  };
+
+  struct PrintableTraceEntry {
+    bool IsTemplateBegin;
+    std::string InstantiationKind;
+    std::string Name;
+    std::string FileName;
+    int Line = 0;
+    int Column = 0;
+    double TimeStamp = 0.0;
+    int MemoryUsage = 0;
+  };
+
+  class TracePrinter {
+  public:
+    virtual void startTrace(raw_ostream* os) = 0;
+    virtual void endTrace(raw_ostream* os) = 0;
+    virtual void printEntry(raw_ostream* os,
+      const PrintableTraceEntry& Entry) = 0;
+
+    virtual std::string getFormatName() = 0;
+
+    virtual ~TracePrinter() {}
+  };
+
+  class YamlPrinter : public TracePrinter {
+  public:
+    void startTrace(raw_ostream* os);
+    void endTrace(raw_ostream* os);
+    void printEntry(raw_ostream* os, const PrintableTraceEntry& Entry);
+
+    std::string getFormatName() { return "yaml"; }
+
+  private:
+    std::unique_ptr<llvm::yaml::Output> Output;
+  };
+
+  class XmlPrinter : public TracePrinter {
+  public:
+    void startTrace(raw_ostream* os);
+    void endTrace(raw_ostream* os);
+    void printEntry(raw_ostream* os, const PrintableTraceEntry& Entry);
+
+    std::string getFormatName() { return "xml"; }
+  };
+
+  class TextPrinter : public TracePrinter {
+  public:
+    void startTrace(raw_ostream* os);
+    void endTrace(raw_ostream* os);
+    void printEntry(raw_ostream* os, const PrintableTraceEntry& Entry);
+
+    std::string getFormatName() { return "text"; }
+  };
+
+private:
+  PrintableTraceEntry rawToPrintable(const RawTraceEntry& Entry);
+
+  bool TemplightFlag;
+  bool TemplightMemoryFlag;
+  bool TemplightSafeModeFlag;
+
+  unsigned TraceEntryCount;
+
+  unsigned TraceCapacity;
+  RawTraceEntry* TraceEntries;
+  RawTraceEntry LastBeginEntry;
+
+  raw_ostream* TraceOS;
+  std::unique_ptr<TracePrinter> TemplateTracePrinter;
+
+public:
+  void setTemplightFlag(bool B) {
+    TemplightFlag = B;
+  }
+
+  void setTemplightMemoryFlag(bool B) {
+    TemplightMemoryFlag = B;
+    TemplightFlag |= B;
+  }
+
+  void setTemplightSafeModeFlag(bool B) {
+    TemplightSafeModeFlag = B;
+    TemplightFlag |= B;
+  }
+
+  unsigned getTraceCapacity() const {
+    return TraceCapacity;
+  }
+
+  void setTraceCapacity(unsigned Capacity) {
+    TraceCapacity = Capacity;
+  }
+
+  void templightTraceToStdOut();
+
+
+  void allocateTraceEntriesArray() {
+    if (TraceEntries != 0) {
+      return;
+    }
+
+    TraceEntries = new RawTraceEntry[TraceCapacity];
+  }
+
+  void setTemplightOutputFile(const std::string& FileName);
+
+  /// \brief Sets the format type of the template trace file.
+  /// The argument can be xml/yaml/text
+  void setTemplightOutputFormat(const std::string& Format);
+
+  bool getTemplightFlag() const {
+    return TemplightFlag;
+  }
+
+  bool getTemplightMemoryFlag() const {
+    return TemplightMemoryFlag;
+  }
+
+  bool getTemplightSafeModeFlag() const {
+    return TemplightSafeModeFlag;
+  }
+
+  void setTemplightFormat(const std::string& Format);
+
+  void traceTemplateBegin(unsigned int InstantiationKind, Decl* Entity,
+    SourceLocation PointOfInstantiation);
+  void traceTemplateEnd(unsigned int InstantiationKind);
+  void traceMemoization(NamedDecl* Memoizied, SourceLocation Loc);
+
+
+  void startTemplight();
+  void finishTemplight();
+
+private:
+  void flushRawTraceEntry(const RawTraceEntry& Entry);
+  // END TEMPLIGHT
 };
 
 /// \brief RAII object that enters a new expression evaluation context.
Index: lib/Driver/Tools.cpp
===================================================================
--- lib/Driver/Tools.cpp	(revision 218454)
+++ lib/Driver/Tools.cpp	(working copy)
@@ -3450,6 +3450,23 @@
     CmdArgs.push_back(A->getValue());
   }
 
+  // BEGIN TEMPLIGHT
+  if (Arg *A = Args.getLastArg(options::OPT_trace_capacity)) {
+    CmdArgs.push_back("-trace-capacity");
+    CmdArgs.push_back(A->getValue());
+  }
+
+  if (Arg *A = Args.getLastArg(options::OPT_templight_output)) {
+    CmdArgs.push_back("-templight-output");
+    CmdArgs.push_back(A->getValue());
+  }
+
+  if (Arg *A = Args.getLastArg(options::OPT_templight_format)) {
+      CmdArgs.push_back("-templight-format");
+      CmdArgs.push_back(A->getValue());
+  }
+  // END TEMPLIGHT
+
   if (Arg *A = Args.getLastArg(options::OPT_fconstexpr_depth_EQ)) {
     CmdArgs.push_back("-fconstexpr-depth");
     CmdArgs.push_back(A->getValue());
@@ -3593,6 +3610,12 @@
   Args.AddLastArg(CmdArgs, options::OPT_fdiagnostics_parseable_fixits);
   Args.AddLastArg(CmdArgs, options::OPT_ftime_report);
   Args.AddLastArg(CmdArgs, options::OPT_ftrapv);
+  // BEGIN TEMPLIGHT
+  Args.AddLastArg(CmdArgs, options::OPT_templight);
+  Args.AddLastArg(CmdArgs, options::OPT_templight_stdout);
+  Args.AddLastArg(CmdArgs, options::OPT_templight_memory);
+  Args.AddLastArg(CmdArgs, options::OPT_templight_safe_mode);
+  // END TEMPLIGHT
 
   if (Arg *A = Args.getLastArg(options::OPT_ftrapv_handler_EQ)) {
     CmdArgs.push_back("-ftrapv-handler");
Index: lib/Frontend/CompilerInstance.cpp
===================================================================
--- lib/Frontend/CompilerInstance.cpp	(revision 218454)
+++ lib/Frontend/CompilerInstance.cpp	(working copy)
@@ -518,6 +518,35 @@
                                   CodeCompleteConsumer *CompletionConsumer) {
   TheSema.reset(new Sema(getPreprocessor(), getASTContext(), getASTConsumer(),
                          TUKind, CompletionConsumer));
+  // BEGIN TEMPLIGHT
+  bool Templight = getInvocation().getFrontendOpts().Templight;
+  bool TemplightStdout = getInvocation().getFrontendOpts().TemplightStdout;
+  bool TemplightMemory = getInvocation().getFrontendOpts().TemplightMemory;
+  bool TemplightSafe = getInvocation().getFrontendOpts().TemplightSafeMode;
+  std::string TemplightOutput =
+    getInvocation().getFrontendOpts().TemplightOutputFile;
+
+  unsigned TraceCapacity = getInvocation().getFrontendOpts().TraceCapacity;
+
+  std::string TemplightFormat =
+    getInvocation().getFrontendOpts().TemplightFormat;
+ 
+  TheSema->setTemplightFlag(Templight);
+
+  if (!TemplightFormat.empty()) {
+    TheSema->setTemplightFormat(TemplightFormat);
+  }
+
+  if (!TemplightOutput.empty()) {
+    TheSema->setTemplightOutputFile(TemplightOutput);
+  }
+
+  TheSema->setTemplightMemoryFlag(TemplightMemory);
+  TheSema->setTemplightSafeModeFlag(TemplightSafe);
+  TheSema->setTraceCapacity(TraceCapacity);
+
+  if (TemplightStdout) TheSema->templightTraceToStdOut();
+  // END TEMPLIGHT
 }
 
 // Output Files
Index: lib/Frontend/CompilerInvocation.cpp
===================================================================
--- lib/Frontend/CompilerInvocation.cpp	(revision 218454)
+++ lib/Frontend/CompilerInvocation.cpp	(working copy)
@@ -834,7 +834,27 @@
   Opts.ASTDumpLookups = Args.hasArg(OPT_ast_dump_lookups);
   Opts.UseGlobalModuleIndex = !Args.hasArg(OPT_fno_modules_global_index);
   Opts.GenerateGlobalModuleIndex = Opts.UseGlobalModuleIndex;
-  
+  // BEGIN TEMPLIGHT
+  Opts.Templight = Args.hasArg(OPT_templight);
+  Opts.TemplightStdout = Args.hasArg(OPT_templight_stdout);
+  Opts.TemplightMemory = Args.hasArg(OPT_templight_memory);
+  Opts.TemplightSafeMode = Args.hasArg(OPT_templight_safe_mode);
+
+  if (const Arg *A = Args.getLastArg(OPT_templight_output)) {
+    Opts.TemplightOutputFile = A->getValue();
+  }
+
+  if (const Arg *A = Args.getLastArg(OPT_templight_format)) {
+    Opts.TemplightFormat = A->getValue();
+  }
+
+  if (const Arg *A = Args.getLastArg(OPT_trace_capacity)) {
+    Opts.TraceCapacity = atoi(A->getValue());
+  } else {
+    Opts.TraceCapacity = 5E5;
+  }
+  // END TEMPLIGHT 
+
   Opts.CodeCompleteOpts.IncludeMacros
     = Args.hasArg(OPT_code_completion_macros);
   Opts.CodeCompleteOpts.IncludeCodePatterns
Index: lib/Parse/ParseAST.cpp
===================================================================
--- lib/Parse/ParseAST.cpp	(revision 218454)
+++ lib/Parse/ParseAST.cpp	(working copy)
@@ -31,6 +31,21 @@
 
 namespace {
 
+// BEGIN TEMPLIGHT
+class TemplightDriver {
+public:
+  TemplightDriver(Sema& S) : TheSema(S) {
+    TheSema.startTemplight();
+  }
+
+  ~TemplightDriver() {
+    TheSema.finishTemplight();
+  }
+
+  Sema& TheSema;
+};
+// END TEMPLIGHT
+
 /// If a crash happens while the parser is active, an entry is printed for it.
 class PrettyStackTraceParserEntry : public llvm::PrettyStackTraceEntry {
   const Parser &P;
@@ -98,6 +113,9 @@
 }
 
 void clang::ParseAST(Sema &S, bool PrintStats, bool SkipFunctionBodies) {
+  // BEGIN TEMPLIGHT
+  TemplightDriver TraceFlusher(S);
+  // END TEMPLIGHT
   // Collect global stats on Decls/Stmts (until we have a module streamer).
   if (PrintStats) {
     Decl::EnableStatistics();
Index: lib/Sema/Sema.cpp
===================================================================
--- lib/Sema/Sema.cpp	(revision 218454)
+++ lib/Sema/Sema.cpp	(working copy)
@@ -108,6 +108,10 @@
     TyposCorrected(0), AnalysisWarnings(*this),
     VarDataSharingAttributesStack(nullptr), CurScope(nullptr),
     Ident_super(nullptr), Ident___float128(nullptr)
+// BEGIN TEMPLIGHT
+    , TemplightFlag(false), TemplightMemoryFlag(false),
+    TraceEntryCount(0), TraceEntries(0)
+// END TEMPLIGHT
 {
   TUScope = nullptr;
 
@@ -246,6 +250,10 @@
   if (isMultiplexExternalSource)
     delete ExternalSource;
 
+  // BEGIN TEMPLIGHT
+  delete [] TraceEntries;
+  // END TEMPLIGHT
+
   // Destroys data sharing attributes stack for OpenMP
   DestroyDataSharingAttributesStack();
 }
Index: lib/Sema/SemaTemplateInstantiate.cpp
===================================================================
--- lib/Sema/SemaTemplateInstantiate.cpp	(revision 218454)
+++ lib/Sema/SemaTemplateInstantiate.cpp	(working copy)
@@ -24,6 +24,18 @@
 #include "clang/Sema/Template.h"
 #include "clang/Sema/TemplateDeduction.h"
 
+// BEGIN TEMPLIGHT
+#include <string>
+#include <vector>
+
+#include <llvm/MC/YAML.h>
+#include "llvm/Support/Format.h"
+#include "llvm/Support/Timer.h"
+#include "llvm/Support/Process.h"
+#include "llvm/Support/FileSystem.h"
+#include "clang/Basic/FileManager.h"
+// END TEMPLIGHT
+
 using namespace clang;
 using namespace sema;
 
@@ -31,6 +43,420 @@
 // Template Instantiation Support
 //===----------------------------------------------------------------------===/
 
+// BEGIN TEMPLIGHT
+namespace llvm {
+namespace yaml {
+
+template <>
+struct ScalarEnumerationTraits<
+    clang::Sema::ActiveTemplateInstantiation::InstantiationKind> {
+  static void enumeration(IO &io,
+    clang::Sema::ActiveTemplateInstantiation::InstantiationKind &value) {
+    using namespace clang;
+    io.enumCase(value, "TemplateInstantiation",
+      Sema::ActiveTemplateInstantiation::TemplateInstantiation);
+    io.enumCase(value, "DefaultTemplateArgumentInstantiation",
+      Sema::ActiveTemplateInstantiation::DefaultTemplateArgumentInstantiation);
+    io.enumCase(value, "DefaultFunctionArgumentInstantiation",
+      Sema::ActiveTemplateInstantiation::DefaultFunctionArgumentInstantiation);
+    io.enumCase(value, "ExplicitTemplateArgumentSubstitution",
+      Sema::ActiveTemplateInstantiation::ExplicitTemplateArgumentSubstitution);
+    io.enumCase(value, "DeducedTemplateArgumentSubstitution",
+      Sema::ActiveTemplateInstantiation::DeducedTemplateArgumentSubstitution);
+    io.enumCase(value, "PriorTemplateArgumentSubstitution",
+      Sema::ActiveTemplateInstantiation::PriorTemplateArgumentSubstitution);
+    io.enumCase(value, "DefaultTemplateArgumentChecking",
+      Sema::ActiveTemplateInstantiation::DefaultTemplateArgumentChecking);
+    io.enumCase(value, "ExceptionSpecInstantiation",
+      Sema::ActiveTemplateInstantiation::ExceptionSpecInstantiation);
+    io.enumCase(value, "Memoization",
+      Sema::ActiveTemplateInstantiation::Memoization);
+  }
+};
+
+template <>
+struct MappingTraits<clang::Sema::PrintableTraceEntry> {
+  static void mapping(IO &io, clang::Sema::PrintableTraceEntry &Entry) {
+    io.mapRequired("IsTemplateBegin", Entry.IsTemplateBegin);
+    io.mapRequired("Kind", Entry.InstantiationKind);
+    io.mapOptional("Name", Entry.Name);
+    io.mapOptional("FileName", Entry.FileName);
+    io.mapOptional("Line", Entry.Line);
+    io.mapOptional("Column", Entry.Column);
+    io.mapRequired("TimeStamp", Entry.TimeStamp);
+    io.mapOptional("MemoryUsage", Entry.MemoryUsage);
+  }
+};
+
+template<typename T>
+struct SequenceTraits<std::vector<T> > {
+   static size_t size(IO &io, std::vector<T> &seq) {
+     return seq.size();
+   }
+
+   static typename std::vector<T>::value_type& element(
+     IO &io, std::vector<T> &seq, size_t index) {
+     return seq[index];
+   }
+  //
+  // The following is option and will cause generated YAML to use
+  // a flow sequence (e.g. [a,b,c]).
+  static const bool flow = true;
+};
+
+} // namespace yaml
+} // namespace llvm
+
+void Sema::YamlPrinter::startTrace(raw_ostream* os) {
+  Output.reset(new llvm::yaml::Output(*os));
+  Output->beginDocuments();
+  Output->beginFlowSequence();
+}
+
+void Sema::YamlPrinter::endTrace(raw_ostream*) {
+  Output->endFlowSequence();
+  Output->endDocuments();
+}
+
+void Sema::YamlPrinter::printEntry(raw_ostream*,
+  const PrintableTraceEntry& Entry) {
+  void *SaveInfo;
+  if ( Output->preflightFlowElement(1, SaveInfo) ) {
+    llvm::yaml::yamlize(*Output, const_cast<PrintableTraceEntry&>(Entry), true);
+    Output->postflightFlowElement(SaveInfo);
+  }
+}
+
+void Sema::TextPrinter::startTrace(raw_ostream*) {
+}
+
+void Sema::TextPrinter::endTrace(raw_ostream*) {
+}
+
+void Sema::TextPrinter::printEntry(raw_ostream* os,
+  const PrintableTraceEntry& Entry) {
+  if (Entry.IsTemplateBegin) {
+    *os
+      << llvm::format(
+        "TemplateBegin\n"
+        "  Kind = %s\n"
+        "  Name = %s\n"
+        "  PointOfInstantiation = %s|%d|%d\n",
+        Entry.InstantiationKind.c_str(), Entry.Name.c_str(),
+        Entry.FileName.c_str(), Entry.Line, Entry.Column);
+
+    *os << llvm::format(
+      "  TimeStamp = %f\n"
+      "  MemoryUsage = %d\n"
+      , Entry.TimeStamp, Entry.MemoryUsage);
+  } else {
+    *os
+      << llvm::format(
+        "TemplateEnd\n"
+        "  Kind = %s\n"
+        "  TimeStamp = %f\n"
+        "  MemoryUsage = %d\n"
+        , Entry.InstantiationKind.c_str(),
+        Entry.TimeStamp, Entry.MemoryUsage);
+  }
+}
+
+namespace { // unnamed namespace
+
+const char* InstantiationKindStrings[] = { "TemplateInstantiation",
+  "DefaultTemplateArgumentInstantiation",
+  "DefaultFunctionArgumentInstantiation",
+  "ExplicitTemplateArgumentSubstitution",
+  "DeducedTemplateArgumentSubstitution", "PriorTemplateArgumentSubstitution",
+  "DefaultTemplateArgumentChecking", "ExceptionSpecInstantiation",
+  "Memoization" };
+
+void reportTraceCapacityExceeded(unsigned int ActualCapacity) {
+  static bool AlreadyReported = false;
+
+  if (!AlreadyReported) {
+    llvm::errs() <<
+      llvm::format("Template instantiations limit of Templight exceeded, "
+      "please specify a greater value.\nCurrent limit: %d\n", ActualCapacity);
+  }
+
+  AlreadyReported = true;
+}
+
+static std::string escapeXml(const std::string& Input) {
+  std::string Result;
+  Result.reserve(64);
+
+  unsigned i, pos = 0;
+  for (i = 0; i < Input.length(); ++i) {
+    if (Input[i] == '<' || Input[i] == '>' || Input[i] == '"'
+      || Input[i] == '\'' || Input[i] == '&') {
+      Result.insert(Result.length(), Input, pos, i - pos);
+      pos = i + 1;
+      switch (Input[i]) {
+      case '<':
+        Result += "&lt;";
+        break;
+      case '>':
+        Result += "&gt;";
+        break;
+      case '\'':
+        Result += "&apos;";
+        break;
+      case '"':
+        Result += "&quot;";
+        break;
+      case '&':
+        Result += "&amp;";
+        break;
+      default:
+        break;
+      }
+    }
+  }
+  Result.insert(Result.length(), Input, pos, i - pos);
+  return Result;
+}
+
+} // unnamed namespace
+
+
+void Sema::XmlPrinter::startTrace(raw_ostream* os) {
+  *os <<
+    "<?xml version=\"1.0\" standalone=\"yes\"?>\n"
+    "<Trace>\n";
+}
+
+void Sema::XmlPrinter::endTrace(raw_ostream* os) {
+  *os << "</Trace>\n";
+}
+
+void Sema::XmlPrinter::printEntry(
+  raw_ostream* os, const Sema::PrintableTraceEntry& Entry) {
+  if (Entry.IsTemplateBegin) {
+    std::string EscapedName = escapeXml(Entry.Name);
+    *os
+      << llvm::format("<TemplateBegin>\n"
+        "    <Kind>%s</Kind>\n"
+        "    <Context context = \"%s\"/>\n"
+        "    <PointOfInstantiation>%s|%d|%d</PointOfInstantiation>\n",
+        Entry.InstantiationKind.c_str(), EscapedName.c_str(),
+        Entry.FileName.c_str(), Entry.Line, Entry.Column);
+
+    *os << llvm::format("    <TimeStamp time = \"%f\"/>\n"
+      "    <MemoryUsage bytes = \"%d\"/>\n"
+      "</TemplateBegin>\n", Entry.TimeStamp, Entry.MemoryUsage);
+  } else {
+    *os
+      << llvm::format("<TemplateEnd>\n"
+        "    <Kind>%s</Kind>\n"
+        "    <TimeStamp time = \"%f\"/>\n"
+        "    <MemoryUsage bytes = \"%d\"/>\n"
+        "</TemplateEnd>\n", Entry.InstantiationKind.c_str(),
+        Entry.TimeStamp, Entry.MemoryUsage);
+  }
+}
+
+void Sema::setTemplightFormat(const std::string& Format) {
+  if (Format == "yaml") {
+    TemplateTracePrinter.reset(new YamlPrinter());
+  }
+  else if (Format == "xml") {
+    TemplateTracePrinter.reset(new XmlPrinter());
+  }
+  else if (Format == "txt") {
+    TemplateTracePrinter.reset(new TextPrinter());
+  }
+  else {
+    llvm::errs() << "Error: Unrecoginized template trace format:" << Format << '\n';
+  }
+
+  setTemplightFlag(true);
+}
+
+Sema::PrintableTraceEntry
+Sema::rawToPrintable(const Sema::RawTraceEntry& Entry) {
+  PrintableTraceEntry Ret;
+
+  Ret.IsTemplateBegin = Entry.IsTemplateBegin;
+  Ret.InstantiationKind = InstantiationKindStrings[Entry.InstantiationKind];
+
+  if (Entry.IsTemplateBegin) {
+    Decl *Template = reinterpret_cast<Decl*>(Entry.Entity);
+    NamedDecl *NamedTemplate = dyn_cast<NamedDecl>(Template);
+
+    if (NamedTemplate) {
+      llvm::raw_string_ostream OS(Ret.Name);
+      NamedTemplate->getNameForDiagnostic(OS, getLangOpts(), true);
+    }
+
+    PresumedLoc Loc = getSourceManager().getPresumedLoc(
+      Entry.PointOfInstantiation);
+
+    if (Loc.isValid()) {
+      Ret.FileName = Loc.getFilename();
+      Ret.Line = Loc.getLine();
+      Ret.Column = Loc.getColumn();
+    }
+  }
+
+  Ret.TimeStamp = Entry.TimeStamp;
+  Ret.MemoryUsage = Entry.MemoryUsage;
+
+  return Ret;
+}
+
+void Sema::startTemplight() {
+  if (!getTemplightFlag()) {
+    return;
+  }
+
+  if (!getTemplightSafeModeFlag()) {
+    allocateTraceEntriesArray();
+  }
+
+  if (!TemplateTracePrinter) {
+    TemplateTracePrinter.reset(new YamlPrinter());
+  }
+
+  FileID fileID = getSourceManager().getMainFileID();
+
+  if (!TraceOS) {
+    std::string postfix = getTemplightMemoryFlag() ? ".memory.trace." : ".trace.";
+    postfix += TemplateTracePrinter->getFormatName();
+
+    std::string FileName =
+      getSourceManager().getFileEntryForID(fileID)->getName() + postfix;
+
+    std::error_code error;
+    TraceOS = new llvm::raw_fd_ostream(FileName.c_str(), error, llvm::sys::fs::F_None);
+
+    if (error) {
+      llvm::errs() <<
+        "Can not open file to write trace of template instantiations: "
+        << FileName << " Error: " << error.message();
+      setTemplightFlag(false);
+      return;
+    }
+  }
+
+  TemplateTracePrinter->startTrace(TraceOS);
+}
+
+void Sema::finishTemplight() {
+  if (!getTemplightFlag()) {
+    return;
+  }
+
+  // In this case we collected the entries in a buffer
+  // and we have to output them now
+  if (!getTemplightSafeModeFlag()) {
+    for (unsigned i = 0; i < TraceEntryCount; ++i) {
+      TemplateTracePrinter->printEntry(TraceOS,
+        rawToPrintable(TraceEntries[i]));
+    }
+  }
+
+  TemplateTracePrinter->endTrace(TraceOS);
+
+  TraceOS->flush();
+  if (TraceOS != &llvm::outs()) {
+    delete TraceOS;
+  }
+}
+
+void Sema::templightTraceToStdOut() {
+  TraceOS = &llvm::outs();
+  TemplightFlag = true;
+}
+
+void Sema::setTemplightOutputFile(const std::string& FileName) {
+  std::error_code error;
+  TraceOS = new llvm::raw_fd_ostream(FileName.c_str(), error, llvm::sys::fs::F_None);
+
+  if (error) {
+    llvm::errs() <<
+      "Can not open file to write trace of template instantiations: "
+      << FileName << " Error: " << error.message();
+    TraceOS = 0;
+    return;
+  }
+
+  setTemplightFlag(true);
+}
+
+void Sema::traceTemplateBegin(unsigned int InstantiationKind, Decl* Entity,
+  SourceLocation PointOfInstantiation) {
+  if (TraceEntryCount >= TraceCapacity) {
+    reportTraceCapacityExceeded(TraceCapacity);
+    return;
+  }
+
+  RawTraceEntry Entry;
+
+  llvm::TimeRecord timeRecord = llvm::TimeRecord::getCurrentTime();
+
+  Entry.IsTemplateBegin = true;
+  Entry.InstantiationKind =
+    (ActiveTemplateInstantiation::InstantiationKind)InstantiationKind;
+  Entry.Entity = (uintptr_t)Entity;
+  Entry.PointOfInstantiation = PointOfInstantiation;
+  Entry.TimeStamp = timeRecord.getWallTime();
+  Entry.MemoryUsage =
+    (getTemplightMemoryFlag()) ? llvm::sys::Process::GetMallocUsage() : 0;
+
+  if (getTemplightSafeModeFlag()) {
+    TemplateTracePrinter->printEntry(TraceOS, rawToPrintable(Entry));
+    TraceOS->flush();
+  } else {
+    TraceEntries[TraceEntryCount++] = Entry;
+  }
+
+  LastBeginEntry = Entry;
+}
+
+void Sema::traceTemplateEnd(unsigned int InstantiationKind) {
+  if (TraceEntryCount >= TraceCapacity) {
+    reportTraceCapacityExceeded(TraceCapacity);
+    return;
+  }
+
+  RawTraceEntry Entry;
+
+  llvm::TimeRecord timeRecord = llvm::TimeRecord::getCurrentTime();
+
+  Entry.IsTemplateBegin = false;
+  Entry.InstantiationKind =
+    (ActiveTemplateInstantiation::InstantiationKind)InstantiationKind;
+  Entry.TimeStamp = timeRecord.getWallTime();
+  Entry.MemoryUsage =
+    (getTemplightMemoryFlag()) ? llvm::sys::Process::GetMallocUsage() : 0;
+
+  if (getTemplightSafeModeFlag()) {
+    TemplateTracePrinter->printEntry(TraceOS, rawToPrintable(Entry));
+    TraceOS->flush();
+  } else {
+    TraceEntries[TraceEntryCount++] = Entry;
+  }
+}
+
+void Sema::traceMemoization(NamedDecl* Memoized, SourceLocation Loc)
+{
+  if (LastBeginEntry.InstantiationKind ==
+    ActiveTemplateInstantiation::Memoization
+    && LastBeginEntry.IsTemplateBegin
+    && LastBeginEntry.Entity == (uintptr_t)Memoized) {
+    return;
+  }
+
+  traceTemplateBegin(ActiveTemplateInstantiation::Memoization,
+    Memoized, Loc);
+
+  traceTemplateEnd(ActiveTemplateInstantiation::Memoization);
+}
+
+// END TEMPLIGHT
+
 /// \brief Retrieve the template argument list(s) that should be used to
 /// instantiate the definition of the given declaration.
 ///
@@ -195,6 +621,10 @@
 
   case DefaultTemplateArgumentChecking:
     return false;
+  // BEGIN TEMPLIGHT
+  case Memoization:
+    break;
+  // END TEMPLIGHT
   }
 
   llvm_unreachable("Invalid InstantiationKind!");
@@ -222,6 +652,11 @@
     SemaRef.ActiveTemplateInstantiations.push_back(Inst);
     if (!Inst.isInstantiationRecord())
       ++SemaRef.NonInstantiationEntries;
+    // BEGIN TEMPLIGHT
+    if (SemaRef.getTemplightFlag())
+      SemaRef.traceTemplateBegin(Inst.Kind, Inst.Entity, PointOfInstantiation);
+    // END TEMPLIGHT
+
   }
 }
 
@@ -364,6 +799,13 @@
       SemaRef.ActiveTemplateInstantiationLookupModules.pop_back();
     }
 
+    // BEGIN TEMPLIGHT
+    if (SemaRef.getTemplightFlag()) {
+      ActiveTemplateInstantiation Last =
+        SemaRef.ActiveTemplateInstantiations.back();
+      SemaRef.traceTemplateEnd(Last.Kind);
+    }
+    // END TEMPLIGHT
     SemaRef.ActiveTemplateInstantiations.pop_back();
     Invalid = true;
   }
@@ -575,6 +1017,10 @@
         << cast<FunctionDecl>(Active->Entity)
         << Active->InstantiationRange;
       break;
+    // BEGIN TEMPLIGHT
+    case ActiveTemplateInstantiation::Memoization:
+      break;
+    // END TEMPLIGHT
     }
   }
 }
@@ -615,6 +1061,10 @@
       // or deduced template arguments, so SFINAE applies.
       assert(Active->DeductionInfo && "Missing deduction info pointer");
       return Active->DeductionInfo;
+    // BEGIN TEMPLIGHT
+    case ActiveTemplateInstantiation::Memoization:
+      break;
+    // END TEMPLIGHT
     }
   }
 
Index: lib/Sema/SemaTemplateInstantiateDecl.cpp
===================================================================
--- lib/Sema/SemaTemplateInstantiateDecl.cpp	(revision 218454)
+++ lib/Sema/SemaTemplateInstantiateDecl.cpp	(working copy)
@@ -3213,8 +3213,18 @@
       assert(FunTmpl->getTemplatedDecl() == Tmpl &&
              "Deduction from the wrong function template?");
       (void) FunTmpl;
+      // BEGIN TEMPLIGHT
+      if (SemaRef.getTemplightFlag())
+        SemaRef.traceTemplateEnd(ActiveInst.Kind);
+      // END TEMPLIGHT
       ActiveInst.Kind = ActiveInstType::TemplateInstantiation;
       ActiveInst.Entity = New;
+      // BEGIN TEMPLIGHT
+      if (SemaRef.getTemplightFlag()) {
+        SemaRef.traceTemplateBegin(ActiveInst.Kind, ActiveInst.Entity,
+            ActiveInst.PointOfInstantiation);
+      }
+      // END TEMPLIGHT
     }
   }
 
Index: lib/Sema/SemaType.cpp
===================================================================
--- lib/Sema/SemaType.cpp	(revision 218454)
+++ lib/Sema/SemaType.cpp	(working copy)
@@ -5196,7 +5196,11 @@
       // Try to recover by implicitly importing this module.
       createImplicitModuleImportForErrorRecovery(Loc, Owner);
     }
-
+    // BEGIN TEMPLIGHT
+    else if (Def && getTemplightFlag()) {
+      traceMemoization(Def, Loc);
+    }
+    // END TEMPLIGHT
     // We lock in the inheritance model once somebody has asked us to ensure
     // that a pointer-to-member type is complete.
     if (Context.getTargetInfo().getCXXABI().isMicrosoft()) {
