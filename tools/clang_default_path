#!/usr/bin/python3
"""
Utility to query the default include PATH of gcc or clang.

Supported options:

 -g, --gcc <path>       The binary to use as gcc or clang (default: clang)
 -h, --help             Display this help message
 -t, --type sys|normal  The type of include path to query (default: sys)
 -f, --format cpp|shell The output format (default: cpp)

Depending on its argument, the script queries the default
(system) include path.
"""

# Metashell - Interactive C++ template metaprogramming shell
# Copyright (C) 2013, Abel Sinkovics (abel@sinkovics.hu)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import subprocess
import getopt
import json


def run(cmd):
    """Run the given command"""
    return subprocess.Popen(
        cmd,
        stderr=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stdin=subprocess.PIPE
    ).communicate()


def bytes_to_string(bts):
    """Converts bytes to string. Support Python 2 and 3"""
    return bts if isinstance(bts, str) else ''.join([chr(b) for b in bts])


def get_standard_gcc_includes(gcc):
    """Get the standard include path of a gcc/clang"""
    includes = []
    sysincludes = []
    current = None
    for line in bytes_to_string(run([gcc, '-v', '-xc++', '-'])[1]).split('\n'):
        retry = True
        while retry:
            retry = False
            if current is None:
                if line.startswith('#include "'):
                    current = includes
                elif line.startswith('#include <'):
                    current = sysincludes
            else:
                # Apple Clang has framework directories mixed in with includes
                is_framework = line.endswith(' (framework directory)')
                if line.startswith(' ') and not is_framework:
                    current.append(line.strip())
                else:
                    current = None
                    retry = True
    return (includes, sysincludes)


def main():
    """The main function of the script"""
    try:
        opts, _ = getopt.getopt(
            sys.argv[1:],
            'ht:g:f:',
            ['help', 'type=', 'gcc=', 'format=']
        )
    except getopt.error:
        msg = sys.exc_info()[1]
        print(msg)
        print("Getting help: --help")
        sys.exit(1)

    inc_type = 'sys'
    gcc = 'clang'
    out_format = 'cpp'

    for opt, val in opts:
        if opt in ('-t', '--type'):
            if val in ('sys', 'normal'):
                inc_type = val
            else:
                print('Invalid type: {0}'.format(val))
                sys.exit(1)
        elif opt in ('-h', '--help'):
            print(__doc__)
            sys.exit(0)
        elif opt in ('-g', '--gcc'):
            gcc = val
        elif opt in ('-f', '--format'):
            out_format = val

    (normal, system) = get_standard_gcc_includes(gcc)
    paths = system if inc_type == 'sys' else normal
    if out_format == 'cpp':
        print('\n'.join([', {0}'.format(json.dumps(s)) for s in paths]))
        print('')
    elif out_format == 'shell':
        print(':'.join(paths))
    else:
        print('Unknown output format: {0}'.format(out_format))


if __name__ == '__main__':
    main()
