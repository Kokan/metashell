#!/usr/bin/python
"""Test the config file"""

# Metashell - Interactive C++ template metaprogramming shell
# Copyright (C) 2016, Abel Sinkovics (abel@sinkovics.hu)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import unittest
import util


MODULE_UNDER_TEST = util.load_from_bin('deploy')


def no_logging(_):
    """A null logger"""
    pass


def dirname_times(path, times):
    """Calls os.path.dirname on path times times"""
    for _ in xrange(0, times):
        path = os.path.dirname(path)
    return path


def environment_variable(name, default_value):
    """Returns the value of the environment variable"""
    return os.environ[name] if name in os.environ else default_value


def source_root():
    """Returns the path to the root of the source tree"""
    return environment_variable(
        'SRC_ROOT',
        dirname_times(os.path.realpath(__file__), 4)
    )


def config_path():
    """Returns the path to the config file to test"""
    return environment_variable(
        'CONFIG',
        os.path.join(
            source_root(), 'tools', 'demo_server', 'config', 'metashell.json'
        )
    )


def load_config():
    """Loads the config file"""
    return MODULE_UNDER_TEST.load_config_file(config_path(), no_logging)


def config_of(name):
    """Returns a config from the config file"""
    for config in load_config():
        if config['name'] == name:
            return config
    raise Exception('Config {0} is not in the config file'.format(name))


def paths_to_copy(config):
    """Generator for the list of paths to copy based on a config"""
    if 'bin' in config:
        for path in config['bin']:
            yield MODULE_UNDER_TEST.path_substitutions(path)

    for key in ('include', 'share'):
        if key in config:
            for entry in config[key]:
                yield MODULE_UNDER_TEST.path_substitutions(entry['src'])


# pylint: disable=missing-docstring
# pylint: disable=invalid-name
# pylint: disable=too-many-public-methods


class TestConfig(unittest.TestCase):

    def test_files_are_available(self):
        config = config_of('metashell')

        self.assertIn('bin', config)
        self.assertIn('include', config)
        self.assertIn('share', config)

        src_root = source_root()
        for path in paths_to_copy(config):
            full_path = os.path.join(src_root, path)
            path_if_exists = full_path if os.path.exists(full_path) else ''
            self.assertEqual(path_if_exists, full_path)


if __name__ == '__main__':
    unittest.main()
